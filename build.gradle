buildscript {
    ext.kotlinVersion = "1.2.61"
    ext.junitVersion = "5.3.0"
    ext.junitPlatformVersion = "1.0.0"
    ext.assertjVersion = "3.8.0"

    repositories { mavenCentral() }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
    }
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'jacoco'

    repositories { mavenCentral() }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"

        runtime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        runtime "org.junit.platform:junit-platform-console:$junitPlatformVersion"
    }

    jacoco {
        toolVersion = "0.8.2"
        reportsDir = file("$buildDir/reports")
        applyTo junitPlatformTest
    }

    test {
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/junitPlatformTest.exec")
            includeNoLocationClasses = true
        }
    }
    test.dependsOn junitPlatformTest

    compileKotlin { kotlinOptions { jvmTarget = "1.8" }}
    compileTestKotlin { kotlinOptions { jvmTarget = "1.8" }}
}

subprojects {
    jacocoTestReport {
        group = "Reporting"
        description = "Generate Jacoco coverage report."
        classDirectories = fileTree(dir: "$buildDir/classes/kotlin/main")
        def coverageSourceDirs = ["src/main/kotlin"]
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("$buildDir/jacoco/junitPlatformTest.exec")
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = true
        }
    }
}

project(':project:video') {
    dependencies {
        compile project(':project:data')
    }
}

task jacocoRootTestReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}
